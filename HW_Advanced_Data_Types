#1. Define the id of next variables:
int_a = 55
str_b = 'cursor'
set_c = {1, 2, 3}
lst_d = [1, 2, 3]
dict_e = {'a': 1, 'b': 2, 'c': 3}

print(id(int_a), id(str_b), id(set_c), id(lst_d), id(dict_e))

Output:
2506525593648 2506526358320 2506531686656 2506526441536 2506526358208

#2. Append 4 and 5 to the lst_d and define the id one more time.
lst_d.append(4)
lst_d.append(5)
print(id(lst_d))

Output:
2264042586176

#3. Define the type of each object from step 1.
print(type(int_a), type(str_b), type(set_c), type(lst_d), type(dict_e))

Output:
<class 'int'> <class 'str'> <class 'set'> <class 'list'> <class 'dict'>

#4*. Check the type of the objects by using isinstance.

print(isinstance(int_a, int), isinstance(str_b, str), isinstance(set_c, set), isinstance(lst_d, list), isinstance(dict_e, dict))

Output:
True True True True True

String formatting:
Replace the placeholders with a value:
"Anna has ___ apples and ___ peaches."

Apples = 4
Peaches = 7

#5. With .format and curly braces {}

print("Anna has {} apples and {} peaches.".format(4, 7))
Output:
Anna has 4 apples and 7 peaches.

#6. By passing index numbers into the curly braces.
print('Anna has {1} apples and {0} peaches.'.format(4, 7))
Output:
Anna has 7 apples and 4 peaches.

#7. By using keyword arguments into the curly braces.
print('Anna has {Apple} apples and {Peache} peaches.'.format(Apple=4, Peache=7))
Output:
Anna has 4 apples and 7 peaches.

#8*. With indicators of field size (5 chars for the first and 3 for the second)
print('Anna has {0:5} apples and {1:3} peaches.'.format(5, ‘three’))
Output:
Anna has     5 apples and three peaches.

#9. With f-strings and variables
Apples = 4
Peaches = 7
Fruits = f"Anna has {Apples} apples and {Peaches} peaches."
print(Fruits)

Output:
Anna has 4 apples and 7 peaches.

#10. With % operator

Apples = 12
Peaches = 6
print("Anna has %s apples and %d peaches." % (Apples, Peaches))

Output:
Anna has 12 apples and 6 peaches.

#11*. With variable substitutions by name (hint: by using dict)
Comprehensions:
(1)
lst = []
for num in range(10):
    if num % 2 == 1:
        lst.append(num ** 2)
    else:
        lst.append(num ** 4)
print(lst)

(2)
list_comprehension = [num // 2 if num % 2 == 0 else num * 10 for num in range(10)]

#12. Convert (1) to list comprehension



#13. Convert (2) to regular for with if-else
(3)
d = {}
for num in range(1, 11):
    if num % 2 == 1:
        d[num] = num ** 2
print(d)

(4)
d = {}
for num in range(1, 11):
    if num % 2 == 1:
        d[num] = num ** 2
    else:
        d[num] = num // 0.5
print(d)

(5)
dict_comprehension = {x: x**3 for x in range(10) if x**3 % 4 == 0}

(6)
dict_comprehension = {x: x**3 if x**3 % 4 == 0 else x for x in range(10)}



#14. Convert (3) to dict comprehension.



#15*. Convert (4) to dict comprehension.



#16. Convert (5) to regular for with if.



#17*. Convert (6) to regular for with if-else.
Lambda:

(7)
def foo(x, y):
    if x < y:
        return x
    else:
        return y

(8)
foo = lambda x, y, z: z if y < x and x > z else y



#18. Convert (7) to lambda function



#19*. Convert (8) to regular function

lst_to_sort = [5, 18, 1, 24, 33, 15, 13, 55]




#20. Sort lst_to_sort from min to max



#21. Sort lst_to_sort from max to min



#22. Use map and lambda to update the lst_to_sort by multiply each element by 2



#23*. Raise each list number to the corresponding number on another list:
list_A = [2, 3, 4]
list_B = [5, 6, 7]



#24. Use reduce and lambda to compute the numbers of a lst_to_sort.



#25. Use filter and lambda to filter the number of a lst_to_sort with elem % 2 == 1.



#26. Considering the range of values: b = range(-10, 10), use the function filter to return only negative numbers.



#27*. Using the filter function, find the values that are common to the two lists:
list_1 = [1,2,3,5,7,9]
list_2 = [2,3,5,6,7,8]




