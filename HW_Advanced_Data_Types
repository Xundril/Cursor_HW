#1. Define the id of next variables:
int_a = 55
str_b = 'cursor'
set_c = {1, 2, 3}
lst_d = [1, 2, 3]
dict_e = {'a': 1, 'b': 2, 'c': 3}

print(id(int_a), id(str_b), id(set_c), id(lst_d), id(dict_e))

Output:
2506525593648 2506526358320 2506531686656 2506526441536 2506526358208

#2. Append 4 and 5 to the lst_d and define the id one more time.

lst_d.append(4)
lst_d.append(5)
print(id(lst_d))

Output:
2264042586176

#3. Define the type of each object from step 1.

print(type(int_a), type(str_b), type(set_c), type(lst_d), type(dict_e))

Output:
<class 'int'> <class 'str'> <class 'set'> <class 'list'> <class 'dict'>

#4*. Check the type of the objects by using isinstance.

print(isinstance(int_a, int), isinstance(str_b, str), isinstance(set_c, set), isinstance(lst_d, list), isinstance(dict_e, dict))

Output:
True True True True True

String formatting:
Replace the placeholders with a value:
"Anna has ___ apples and ___ peaches."

Apples = 4
Peaches = 7

#5. With .format and curly braces {}

print("Anna has {} apples and {} peaches.".format(apples, peaches))
Output:
Anna has apples apples and peaches peaches.

#6. By passing index numbers into the curly braces.

print('Anna has {1} apples and {0} peaches.'.format(4, 7))
Output:
Anna has 7 apples and 4 peaches.

#7. By using keyword arguments into the curly braces.

print('Anna has {Apple} apples and {Peach} peaches.'.format(Apple=4, Peache=7))
Output:
Anna has 4 apples and 7 peaches.

#8*. With indicators of field size (5 chars for the first and 3 for the second)

print('Anna has {0:5} apples and {1:3} peaches.'.format('five', 3))

Output:
Anna has five apples and 3 peaches.

#9. With f-strings and variables

Apples = 4
Peaches = 7
Fruits = f"Anna has {Apples} apples and {Peaches} peaches."
print(Fruits)

Output:
Anna has 4 apples and 7 peaches.

#10. With % operator

Apples = 12
Peaches = 6
print("Anna has %s apples and %d peaches." % (Apples, Peaches))

Output:
Anna has 12 apples and 6 peaches.

#11*. With variable substitutions by name (hint: by using dict)

apples = 10
peaches = 13
dict = {"a": apples, "p": peaches}
print("Anna has %(a)s apples and %(p)s peaches" % dict)


#Comprehensions:
##########################

#12. Convert (1) to list comprehension
##(1)
lst = []
for num in range(10):
    if num % 2 == 1:
        lst.append(num ** 2)
    else:
        lst.append(num ** 4)      
print(lst)

==========================
lst_comp1 = [num ** 2 if num % 2 == 1 else num ** 4 for num in range(10)]
print(lst_comp1)

Output:

[0, 1, 16, 9, 256, 25, 1296, 49, 4096, 81]

#13. Convert (2) to regular for with if-else
##(2)
list_comprehension = [num // 2 if num % 2 == 0 else num * 10 for num in range(10)]

lst_comp2 = []
for num in range(10):
    if num % 2 == 0:
        lst_comp2.append(num // 2)
    else:
        lst_comp2.append(num *10)
print(lst_comp2)

===========================
Output:
[0, 10, 1, 30, 2, 50, 3, 70, 4, 90]

#14. Convert (3) to dict comprehension.
##(3)
d = {}
for num in range(1, 11):
    if num % 2 == 1:
        d[num] = num ** 2
print(d)

===========================
dict_comp3 = {num: num ** 2 for num in range(1, 11) if num % 2 == 1}
print(dict_comp3)

Output:
{1: 1, 3: 9, 5: 25, 7: 49, 9: 81}

#15*. Convert (4) to dict comprehension.
##(4)
d = {}
for num in range(1, 11):
    if num % 2 == 1:
        d[num] = num ** 2
    else:
        d[num] = num // 0.5
print(d)

===========================
dict_comp4 = {num: num ** 2 if num % 2 == 1 else num // 0.5  for num in range (1, 11)}
print (dict_comp4)

Output:
{1: 1, 2: 4.0, 3: 9, 4: 8.0, 5: 25, 6: 12.0, 7: 49, 8: 16.0, 9: 81, 10: 20.0}

#16. Convert (5) to regular for with if.
##(5)
dict_comprehension = {x: x**3 for x in range(10) if x**3 % 4 == 0
===========================

dict_comp5 = {}
for x in range(10):
    if x**3 % 4 == 0:
        dict_comp5[x] = x**3
print(dict_comp5)

Output:
{0: 0, 2: 8, 4: 64, 6: 216, 8: 512}

#17*. Convert (6) to regular for with if-else.
##(6)
dict_comprehension = {x: x**3 if x**3 % 4 == 0 else x for x in range(10)}
===========================

dict_comp6 = {}
for x in range(10):
    if x**3 % 4 == 0:
        dict_comp6[x] = x**3
    else:
        dict_comp6[x] = x
print(dict_comp6)

Output:
{0: 0, 1: 1, 2: 8, 3: 3, 4: 64, 5: 5, 6: 216, 7: 7, 8: 512, 9: 9}

#Lambda:
###################################

#18. Convert (7) to lambda function
##(7)
def foo(x, y):
    if x < y:
        return x
    else:
        return y
===========================
x = 4
y = 7

foo = lambda x, y: x if x < y else y
print(foo(x,y))

Output:
4

#19*. Convert (8) to regular function
##(8)
foo = lambda x, y, z: z if y < x and x > z else y
============================

x = 4
y = 7
z = 10

def foo(x, y, z): return z if y < x and x > z else y
print(foo(x,y,z))

Output:
7


#lst_to_sort = [5, 18, 1, 24, 33, 15, 13, 55]
#####################################

#20. Sort lst_to_sort from min to max

lst_to_sort.sort()
print(lst_to_sort)

Output:
[1, 5, 13, 15, 18, 24, 33, 55]

#21. Sort lst_to_sort from max to min

lst_to_sort.sort(reverse=True)
print(lst_to_sort)

Output:
[55, 33, 24, 18, 15, 13, 5, 1]

#22. Use map and lambda to update the lst_to_sort by multiply each element by 2

lst_to_sort = list(map(lambda x: x * 2, lst_to_sort))
print(lst_to_sort)

Output:
[10, 36, 2, 48, 66, 30, 26, 110]

#23*. Raise each list number to the corresponding number on another list:
list_A = [2, 3, 4]
list_B = [5, 6, 7]

new_lst = list(map(lambda x, y: x + y, list_A, list_B))
print(new_lst)

Output:
[7, 9, 11]

#24. Use reduce and lambda to compute the numbers of a lst_to_sort.

lst_to_sort = [5, 18, 1, 24, 33, 15, 13, 55]

from functools import reduce
sum = reduce(lambda x, y: x + y, lst_to_sort)
print(sum)

Output:
164

#25. Use filter and lambda to filter the number of a lst_to_sort with elem % 2 == 1.

lst_to_sort = [5, 18, 1, 24, 33, 15, 13, 55]

new_lst2 = list(filter(lambda x: x % 2 == 1, lst_to_sort))
print(new_lst2)

Output:
[5, 1, 33, 15, 13, 55]

#26. Considering the range of values: b = range(-10, 10), use the function filter to return only negative numbers.

b = range(-10, 10)
function = list(filter(lambda x: x < 0, b))
print(function)

Output:
[-10, -9, -8, -7, -6, -5, -4, -3, -2, -1]

#27*. Using the filter function, find the values that are common to the two lists:
list_1 = [1,2,3,5,7,9]
list_2 = [2,3,5,6,7,8]

new_lst3 = list(filter(lambda num: num in list_1, list_2))
print(new_lst3)

Output:
[2, 3, 5, 7]
