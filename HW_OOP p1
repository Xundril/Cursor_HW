#1. Create a Vehicle class with max_speed and mileage instance attributes

class Vehicle:

    def __init__(self, max_speed, mileage):
        self.max_speed = max_speed
        self.mileage = mileage

    def print_vehicle(self):
        print(f'Vehicle speed {self.max_speed}, '
              f'mileage {self.mileage} km.')

vehicle = Vehicle("180 km per hour",15000)
vehicle.print_vehicle()

Output:
Vehicle speed 180 km per hour, mileage 15000 km.

#2. Create a child class Bus that will inherit all of the variables and methods of the Vehicle class and will have seating_capacity own method

class Bus(Vehicle):

    def __init__(self, max_speed, mileage, seat_capacity):
        super().__init__(max_speed, mileage)
        self.seat_capacity = seat_capacity

    def seat_capacity(self, seating_capacity):
        self.seating_capacity = seating_capacity

    def seat(self):
        print(f'Bus specifications: max speed - {self.max_speed}, mileage - {self.mileage}, seats - {self.seat_capacity}.')

bus = Bus('160 km per hour', 8000, 56)
bus.print_vehicle()
bus.seat()

Output:
Bus specifications: max speed - 160 km per hour, mileage - 8000, seats - 56.

#3. Determine which class a given Bus object belongs to (Check type of an object)

class Vehicle:

    def __init__(self, max_speed, mileage, seat_capacity):
        self.seat_capacity = seat_capacity
        self.max_speed = max_speed
        self.mileage = mileage

class Bus(Vehicle):
    pass

bus = Bus(160, 8000, 56)

print(type(bus))

Output:
<class '__main__.Bus'>

#4. Determine if School_bus is also an instance of the Vehicle class

class Vehicle:
    def __init__(self, max_speed, mileage, seat_capacity):
        self.seat_capacity = seat_capacity
        self.max_speed = max_speed
        self.mileage = mileage

class Bus(Vehicle):
    pass

School_bus = Bus(40, 120, 5000)

print(isinstance(School_bus, Vehicle))

Output:
True

#5. Create a new class School with get_school_id and number_of_students instance attributes

class School:
    def __init__(self, get_school_id, number_of_students):
        self.get_school_id = get_school_id
        self.number_of_students = number_of_students

    def print_School(self):
        print(f'School id is {self.get_school_id}, Total number of students - {self.number_of_students}')

school = School(1234567,620)
school.print_School()

Output:
School id is 1234567, Total number of students - 620

#6*. Create a new class SchoolBus that will inherit all of the methods from School and Bus and will have its own - bus_school_color

class SchoolBus(School,Bus):
    def __init__(self, get_school_id, number_of_students, max_speed, mileage,  seating_capacity, bus_school_color):
        School.__init__(self, get_school_id, number_of_students)
        Bus.__init__(self, max_speed, mileage, seating_capacity)
        self.bus_school_color = bus_school_color


Bus_1 = SchoolBus(1234567, 620, 120, 240, 5000, 'yellow')
print(f'Bus from school № {Bus_1.get_school_id} is {Bus_1.bus_school_color}.')

Output:
Bus from school № 1234567 is yellow.

#7. Polymorphism: Create two classes: Bear, Wolf. Both of them should have make_sound method. Create two instances, one of Bear and one of Wolf,
make a tuple of it and by using for call their action using the same method.

class Bear:
    def __init__(self, name, age):
        self.name = name
        self.age = age

    def make_sound(self):
        print('Roar')


class Wolf:
    def __init__(self, name, age):
        self.name = name
        self.age = age

    def make_sound(self):
        print('Howl')


bear = Bear('Barny', 6)
wolf = Wolf('White Fang', 4)

for animal in (bear, wolf):
    animal.make_sound()
    
Output:
Roar
Howl

##Magic methods:
########################

#8. Create class City with name, population instance attributes, return a new instance only when population > 1500,
otherwise return message: "Your city is too small".

class City:

    def __init__(self, name, population):
        self.name = name
        self.population = population

    def __new__(cls, name, population):
        instance = super(City, cls).__new__(cls)
        if population > 1500:
            return instance
        else:
            return 'Your city is too small'

    def __str__(self):
        return f'City {self.name} - {self.population} people'


Popul = City('Kiev', 2900000)
print(Popul)
Popul_2 = City('Zhuliany', 1200)
print(Popul_2)

Output:
City Kiev - 2900000 people
Your city is too small

#9. Override a printable string representation of the City class and return: The population of the city {name} is {population}

    def __str__(self):
        return f'The population of the city {self.name} is {self.population}'

Popul = City('Kiev', 2900000)
print(Popul)

Output:
The population of the city Kiev is 2900000

#10*. Override magic method __add__() to perform the additional action as 'multiply' (*) the value which is greater than 10. And perform this add (+) of two instances.



#11. The __call__ method enables Python programmers to write classes where the instances behave like functions and can be called like a function.
Create a new class with __call__ method and define this call to return sum.



#12*. Making Your Objects Truthy or Falsey Using __bool__().
Create class MyOrder with cart and customer instance attributes.
Override the __bool__magic method considered to be truthy if the length of the cart list is non-zero.
e.g.:
order_1 = MyOrder(['a', 'b', 'c'], 'd')
order_2 = MyOrder([], 'a')
bool(order_1)
True
bool(order_2)
False
